"""
ü§ñ EasyRSVP AI Team - Task Master Integration
==============================================

Module d'int√©gration entre les agents CrewAI et Task Master
pour synchroniser l'avancement des t√¢ches.
"""

import os
import json
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
from pathlib import Path

logger = logging.getLogger(__name__)

class TaskMasterIntegration:
    """Classe d'int√©gration avec Task Master"""
    
    def __init__(self, project_root: str = None):
        """Initialise l'int√©gration Task Master"""
        self.project_root = project_root or os.getcwd()
        self.tasks_file = os.path.join(self.project_root, "tasks", "tasks.json")
        self.ensure_tasks_file_exists()
    
    def ensure_tasks_file_exists(self):
        """S'assure que le fichier tasks.json existe"""
        if not os.path.exists(self.tasks_file):
            # Cr√©er le r√©pertoire tasks si n√©cessaire
            os.makedirs(os.path.dirname(self.tasks_file), exist_ok=True)
            
            # Cr√©er un fichier tasks.json vide
            empty_tasks = {
                "version": "1.0.0",
                "project": "EasyRSVP AI Team",
                "description": "Syst√®me d'√©quipe IA automatis√©",
                "created": datetime.now().isoformat(),
                "tasks": []
            }
            
            with open(self.tasks_file, 'w', encoding='utf-8') as f:
                json.dump(empty_tasks, f, indent=2, ensure_ascii=False)
    
    def load_tasks(self) -> Dict[str, Any]:
        """Charge le fichier tasks.json"""
        try:
            with open(self.tasks_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"Erreur lors du chargement des t√¢ches: {e}")
            return {"tasks": []}
    
    def save_tasks(self, tasks_data: Dict[str, Any]):
        """Sauvegarde le fichier tasks.json"""
        try:
            with open(self.tasks_file, 'w', encoding='utf-8') as f:
                json.dump(tasks_data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde des t√¢ches: {e}")
            raise
    
    def find_task_by_id(self, task_id: str) -> Optional[Dict[str, Any]]:
        """Trouve une t√¢che par son ID (supporte les sous-t√¢ches avec notation point)"""
        tasks_data = self.load_tasks()
        
        # Gestion des sous-t√¢ches (ex: "5.3")
        if '.' in task_id:
            parent_id, subtask_id = task_id.split('.', 1)
            parent_id = int(parent_id)
            subtask_id = int(subtask_id)
            
            # Trouver la t√¢che parent
            for task in tasks_data.get("tasks", []):
                if task["id"] == parent_id:
                    # Trouver la sous-t√¢che
                    for subtask in task.get("subtasks", []):
                        if subtask["id"] == subtask_id:
                            subtask["parent_id"] = parent_id
                            return subtask
        else:
            # T√¢che principale
            task_id = int(task_id)
            for task in tasks_data.get("tasks", []):
                if task["id"] == task_id:
                    return task
        
        return None
    
    def update_task_status(self, task_id: str, status: str, details: str = None) -> bool:
        """Met √† jour le statut d'une t√¢che"""
        try:
            tasks_data = self.load_tasks()
            
            # Gestion des sous-t√¢ches
            if '.' in task_id:
                parent_id, subtask_id = task_id.split('.', 1)
                parent_id = int(parent_id)
                subtask_id = int(subtask_id)
                
                for task in tasks_data.get("tasks", []):
                    if task["id"] == parent_id:
                        for subtask in task.get("subtasks", []):
                            if subtask["id"] == subtask_id:
                                subtask["status"] = status
                                if details:
                                    if "details" not in subtask:
                                        subtask["details"] = ""
                                    subtask["details"] += f"\n[{datetime.now().isoformat()}] {details}"
                                
                                self.save_tasks(tasks_data)
                                logger.info(f"Sous-t√¢che {task_id} mise √† jour: {status}")
                                return True
            else:
                # T√¢che principale
                task_id = int(task_id)
                for task in tasks_data.get("tasks", []):
                    if task["id"] == task_id:
                        task["status"] = status
                        if details:
                            if "details" not in task:
                                task["details"] = ""
                            task["details"] += f"\n[{datetime.now().isoformat()}] {details}"
                        
                        self.save_tasks(tasks_data)
                        logger.info(f"T√¢che {task_id} mise √† jour: {status}")
                        return True
            
            logger.warning(f"T√¢che {task_id} non trouv√©e")
            return False
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour de la t√¢che {task_id}: {e}")
            return False
    
    def append_subtask_details(self, task_id: str, details: str) -> bool:
        """Ajoute des d√©tails horodat√©s √† une sous-t√¢che"""
        try:
            if '.' not in task_id:
                logger.error(f"ID de sous-t√¢che invalide: {task_id}")
                return False
            
            tasks_data = self.load_tasks()
            parent_id, subtask_id = task_id.split('.', 1)
            parent_id = int(parent_id)
            subtask_id = int(subtask_id)
            
            for task in tasks_data.get("tasks", []):
                if task["id"] == parent_id:
                    for subtask in task.get("subtasks", []):
                        if subtask["id"] == subtask_id:
                            if "details" not in subtask:
                                subtask["details"] = ""
                            
                            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                            subtask["details"] += f"\n\n[{timestamp}] {details}"
                            
                            self.save_tasks(tasks_data)
                            logger.info(f"D√©tails ajout√©s √† la sous-t√¢che {task_id}")
                            return True
            
            logger.warning(f"Sous-t√¢che {task_id} non trouv√©e")
            return False
            
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout de d√©tails √† {task_id}: {e}")
            return False
    
    def get_next_pending_task(self) -> Optional[Dict[str, Any]]:
        """Retourne la prochaine t√¢che en attente selon les d√©pendances"""
        tasks_data = self.load_tasks()
        
        # Collecte des IDs des t√¢ches termin√©es
        completed_task_ids = set()
        for task in tasks_data.get("tasks", []):
            if task.get("status") == "done":
                completed_task_ids.add(task["id"])
        
        # Trouve la premi√®re t√¢che en attente sans d√©pendances non termin√©es
        for task in tasks_data.get("tasks", []):
            if task.get("status") == "pending":
                dependencies = set(task.get("dependencies", []))
                if dependencies.issubset(completed_task_ids):
                    return task
        
        return None
    
    def get_tasks_by_status(self, status: str = None) -> List[Dict[str, Any]]:
        """Retourne les t√¢ches filtr√©es par statut"""
        tasks_data = self.load_tasks()
        tasks = tasks_data.get("tasks", [])
        
        if status:
            tasks = [task for task in tasks if task.get("status") == status]
        
        return tasks
    
    def get_project_progress(self) -> Dict[str, Any]:
        """Calcule et retourne les statistiques de progression du projet"""
        tasks_data = self.load_tasks()
        tasks = tasks_data.get("tasks", [])
        
        if not tasks:
            return {"total": 0, "completed": 0, "in_progress": 0, "pending": 0, "progress_percentage": 0}
        
        total = len(tasks)
        completed = len([t for t in tasks if t.get("status") == "done"])
        in_progress = len([t for t in tasks if t.get("status") == "in-progress"])
        pending = len([t for t in tasks if t.get("status") == "pending"])
        
        progress_percentage = (completed / total) * 100 if total > 0 else 0
        
        return {
            "total": total,
            "completed": completed,
            "in_progress": in_progress,
            "pending": pending,
            "progress_percentage": round(progress_percentage, 2)
        }
    
    def create_development_session(self, user_story: str, task_id: str = None) -> str:
        """Cr√©e une session de d√©veloppement et retourne un ID unique"""
        session_id = f"dev_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # Log de la session (√† √©tendre selon les besoins)
        logger.info(f"Nouvelle session de d√©veloppement cr√©√©e: {session_id}")
        logger.info(f"User story: {user_story[:100]}...")
        
        if task_id:
            self.append_subtask_details(
                task_id, 
                f"Session de d√©veloppement d√©marr√©e: {session_id}\nUser story: {user_story}"
            )
        
        return session_id
    
    def log_development_phase(self, session_id: str, phase: str, result: Dict[str, Any], task_id: str = None):
        """Log le r√©sultat d'une phase de d√©veloppement"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        logger.info(f"Session {session_id} - Phase {phase} termin√©e")
        
        if task_id and '.' in task_id:
            details = f"Phase {phase} termin√©e dans la session {session_id}:\n{json.dumps(result, indent=2, ensure_ascii=False)}"
            self.append_subtask_details(task_id, details)


# Instance globale pour l'int√©gration
taskmaster = TaskMasterIntegration() 