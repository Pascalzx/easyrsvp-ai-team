# ü§ñ EasyRSVP AI Team - Infrastructure Docker Compose
# ====================================================

version: '3.8'

services:
  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: easyrsvp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-easyrsvp_ai}
      POSTGRES_USER: ${DB_USER:-easyrsvp}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-easyrsvp} -d ${DB_NAME:-easyrsvp_ai}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai-team-network

  # üî¥ Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: easyrsvp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_123}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ai-team-network

  # üîÑ n8n Workflow Automation
  n8n:
    image: n8nio/n8n:${N8N_VERSION:-1.20.0}
    container_name: easyrsvp-n8n
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${N8N_DB_NAME:-n8n}
      DB_POSTGRESDB_USER: ${DB_USER:-easyrsvp}
      DB_POSTGRESDB_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      
      # n8n Configuration
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: ${N8N_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-n8n_secure_123}
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      WEBHOOK_URL: ${N8N_WEBHOOK_URL:-http://localhost:5678}
      
      # Execution and Performance
      EXECUTIONS_PROCESS: main
      EXECUTIONS_MODE: regular
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_123}
      
      # Security and Logging
      N8N_LOG_LEVEL: info
      N8N_LOG_OUTPUT: console,file
      N8N_LOG_FILE_LOCATION: /home/node/logs/n8n.log
      N8N_SECURE_COOKIE: false
      N8N_METRICS: true
      
      # External Services
      N8N_EMAIL_MODE: smtp
      N8N_SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      N8N_SMTP_PORT: ${SMTP_PORT:-587}
      N8N_SMTP_USER: ${SMTP_USER}
      N8N_SMTP_PASS: ${SMTP_PASSWORD}
      N8N_SMTP_SENDER: ${SMTP_FROM:-no-reply@easyrsvp.com}
      
      # API Keys (injected from environment)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      SLACK_TOKEN: ${SLACK_TOKEN}
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      VERCEL_TOKEN: ${VERCEL_TOKEN}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/home/node/workflows:ro
      - ./logs:/home/node/logs
      - ./scripts:/home/node/scripts:ro
    ports:
      - "${N8N_PORT:-5678}:5678"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-team-network

  # ü§ñ CrewAI Agents API
  ai-agents:
    build:
      context: .
      dockerfile: Dockerfile.agents
    container_name: easyrsvp-ai-agents
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${DB_USER:-easyrsvp}:${DB_PASSWORD:-secure_password_123}@postgres:5432/${DB_NAME:-easyrsvp_ai}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_123}
      
      # AI Models
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      
      # External APIs
      VERCEL_TOKEN: ${VERCEL_TOKEN}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      SLACK_TOKEN: ${SLACK_TOKEN}
      DISCORD_TOKEN: ${DISCORD_TOKEN}
      
      # Application Settings
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      PYTHONPATH: /app
    volumes:
      - ./agents:/app/agents
      - ./scripts:/app/scripts
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "${AGENTS_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-team-network

  # üîÑ Celery Worker for Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.agents
    container_name: easyrsvp-celery-worker
    restart: unless-stopped
    command: celery -A agents.tasks worker --loglevel=info --concurrency=4
    environment:
      DATABASE_URL: postgresql://${DB_USER:-easyrsvp}:${DB_PASSWORD:-secure_password_123}@postgres:5432/${DB_NAME:-easyrsvp_ai}
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_123}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      PYTHONPATH: /app
    volumes:
      - ./agents:/app/agents
      - ./scripts:/app/scripts
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-agents:
        condition: service_healthy
    networks:
      - ai-team-network

  # üìä Monitoring Dashboard
  monitoring:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: easyrsvp-monitoring
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${DB_USER:-easyrsvp}:${DB_PASSWORD:-secure_password_123}@postgres:5432/${DB_NAME:-easyrsvp_ai}
      REDIS_URL: redis://redis:6379
      N8N_API_URL: http://n8n:5678
      AGENTS_API_URL: http://ai-agents:8000
    volumes:
      - ./monitoring:/app/monitoring
      - ./logs:/app/logs
    ports:
      - "${MONITORING_PORT:-3000}:3000"
    depends_on:
      - postgres
      - redis
      - n8n
      - ai-agents
    networks:
      - ai-team-network

  # üìà Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: easyrsvp-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - ai-team-network

  # üìä Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: easyrsvp-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-grafana_secure_123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    networks:
      - ai-team-network

# üóÇÔ∏è Volumes persistants
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# üåê Network configuration
networks:
  ai-team-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 