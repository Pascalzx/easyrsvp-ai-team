{
  "name": "🔄 Daily Standup - EasyRSVP Team",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "hour": 9,
              "minute": 0
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "⏰ Daily 9 AM Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "jsCode": "// 📊 Collecte des statuts de tous les agents\nconst today = new Date().toISOString().split('T')[0];\n\nconst teamStatus = {\n  date: today,\n  agents: {\n    product_owner: {\n      status: 'active',\n      current_tasks: [\n        'Analyzing user story US4.3.1 - Event Creation',\n        'Reviewing PRD section 4.4 - Payment Integration',\n        'Defining acceptance criteria for RSVP tracking'\n      ],\n      completed_yesterday: [\n        'Completed analysis of US4.1.1 - User Registration',\n        'Updated PRD with feedback from stakeholders'\n      ],\n      blockers: [],\n      priority_today: 'High - Complete event creation specifications'\n    },\n    tech_lead: {\n      status: 'active',\n      current_tasks: [\n        'Designing database schema for events table',\n        'Planning API architecture for event management',\n        'Reviewing security patterns for user data'\n      ],\n      completed_yesterday: [\n        'Completed authentication architecture design',\n        'Set up TypeScript strict mode configuration'\n      ],\n      blockers: [\n        'Waiting for payment provider selection decision'\n      ],\n      priority_today: 'Medium - Finalize event management architecture'\n    },\n    frontend_developer: {\n      status: 'active',\n      current_tasks: [\n        'Developing EventCard component library',\n        'Implementing responsive design for mobile',\n        'Adding dark mode support to design system'\n      ],\n      completed_yesterday: [\n        'Completed SignupForm component with validation',\n        'Added accessibility features to all form components'\n      ],\n      blockers: [],\n      priority_today: 'High - Complete event creation UI components'\n    },\n    backend_developer: {\n      status: 'active',\n      current_tasks: [\n        'Implementing event CRUD APIs',\n        'Setting up database migrations for Turso',\n        'Adding rate limiting to authentication endpoints'\n      ],\n      completed_yesterday: [\n        'Completed user registration API with email verification',\n        'Set up JWT authentication middleware'\n      ],\n      blockers: [],\n      priority_today: 'High - Deploy event management APIs to staging'\n    },\n    qa_engineer: {\n      status: 'active',\n      current_tasks: [\n        'Testing user registration flow end-to-end',\n        'Running accessibility audit on signup pages',\n        'Setting up automated testing pipeline'\n      ],\n      completed_yesterday: [\n        'Created comprehensive test suite for authentication',\n        'Fixed 3 critical accessibility issues'\n      ],\n      blockers: [\n        'Need staging environment for integration testing'\n      ],\n      priority_today: 'Medium - Complete registration flow testing'\n    },\n    devops_engineer: {\n      status: 'active',\n      current_tasks: [\n        'Optimizing Vercel deployment pipeline',\n        'Setting up monitoring dashboard',\n        'Configuring backup strategy for Turso database'\n      ],\n      completed_yesterday: [\n        'Deployed authentication module to staging',\n        'Set up error tracking with Sentry'\n      ],\n      blockers: [],\n      priority_today: 'Low - Implement automated backup schedule'\n    }\n  },\n  metrics: {\n    features_in_progress: 4,\n    features_completed_this_week: 2,\n    bugs_fixed_yesterday: 5,\n    tests_added_yesterday: 23,\n    deployment_frequency: 'Daily',\n    average_quality_score: 8.7,\n    team_velocity: '12 story points/week',\n    technical_debt_score: 3.2 // out of 10, lower is better\n  },\n  blockers_summary: [\n    'Payment provider selection needed for payment integration',\n    'Staging environment required for QA integration testing'\n  ],\n  achievements: [\n    '🎉 User registration module completed and deployed',\n    '📱 Mobile responsive design implemented across all components',\n    '♿ 100% WCAG AA accessibility compliance achieved',\n    '🚀 Deployment time reduced to under 2 minutes'\n  ],\n  next_milestones: [\n    'Event creation module (Target: End of week)',\n    'Payment integration (Target: Next week)',\n    'RSVP tracking system (Target: Week 3)'\n  ]\n};\n\nreturn teamStatus;"
      },
      "id": "collect-status",
      "name": "📊 Collect Team Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 300]
    },
    {
      "parameters": {
        "jsCode": "// 📈 Génération des métriques de performance\nconst teamData = $input.all()[0].json;\nconst today = new Date();\nconst dayOfWeek = today.getDay(); // 0 = Sunday, 1 = Monday, etc.\n\n// Calcul des métriques avancées\nconst performanceMetrics = {\n  daily_report: {\n    date: teamData.date,\n    day_of_week: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek],\n    team_health: 'Excellent',\n    overall_progress: '85%'\n  },\n  productivity: {\n    tasks_completed_rate: '92%',\n    blockers_resolution_time: '1.5 days average',\n    code_review_turnaround: '4 hours average',\n    deployment_success_rate: '98%'\n  },\n  quality_indicators: {\n    code_coverage: '94%',\n    security_scan_score: '9.2/10',\n    performance_score: '91/100',\n    accessibility_compliance: '100%'\n  },\n  collaboration: {\n    cross_team_dependencies: teamData.blockers_summary.length,\n    knowledge_sharing_sessions: 3,\n    pair_programming_hours: 12,\n    code_reviews_completed: 15\n  },\n  trends: {\n    velocity_trend: '+15% compared to last week',\n    quality_trend: '+5% improvement in test coverage',\n    deployment_frequency_trend: 'Stable at daily deployments',\n    bug_discovery_rate: '-20% (good trend)'\n  },\n  action_items: [\n    {\n      priority: 'high',\n      item: 'Resolve payment provider selection by EOD',\n      owner: 'Product Owner',\n      due_date: teamData.date\n    },\n    {\n      priority: 'medium', \n      item: 'Set up staging environment for QA testing',\n      owner: 'DevOps Engineer',\n      due_date: new Date(Date.now() + 2*24*60*60*1000).toISOString().split('T')[0]\n    }\n  ]\n};\n\nreturn {\n  ...teamData,\n  performance_metrics: performanceMetrics\n};"
      },
      "id": "generate-metrics",
      "name": "📈 Generate Performance Metrics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 300]
    },
    {
      "parameters": {
        "channel": "#easyrsvp-standup",
        "text": "🌅 **Daily Standup Report - {{ $('📊 Collect Team Status').json.date }}**\n\n## 👥 Team Status\n{% for agent, data in $('📊 Collect Team Status').json.agents %}\n**{{ agent.replace('_', ' ').title() }}** ({{ data.status }})\n🎯 Priority: {{ data.priority_today }}\n📋 Working on:\n{% for task in data.current_tasks %}- {{ task }}\n{% endfor %}\n✅ Completed yesterday:\n{% for task in data.completed_yesterday %}- {{ task }}\n{% endfor %}\n{% if data.blockers %}🚫 Blockers:\n{% for blocker in data.blockers %}- {{ blocker }}\n{% endfor %}{% endif %}\n\n{% endfor %}\n## 📊 Team Metrics\n🚀 **Velocity**: {{ $('📊 Collect Team Status').json.metrics.team_velocity }}\n📈 **Quality Score**: {{ $('📊 Collect Team Status').json.metrics.average_quality_score }}/10\n✅ **Features in Progress**: {{ $('📊 Collect Team Status').json.metrics.features_in_progress }}\n🎉 **Completed This Week**: {{ $('📊 Collect Team Status').json.metrics.features_completed_this_week }}\n⚡ **Deployment Frequency**: {{ $('📊 Collect Team Status').json.metrics.deployment_frequency }}\n\n## 🎉 Recent Achievements\n{% for achievement in $('📊 Collect Team Status').json.achievements %}- {{ achievement }}\n{% endfor %}\n\n## 🚫 Active Blockers\n{% for blocker in $('📊 Collect Team Status').json.blockers_summary %}- {{ blocker }}\n{% endfor %}\n\n## 🎯 Next Milestones\n{% for milestone in $('📊 Collect Team Status').json.next_milestones %}- {{ milestone }}\n{% endfor %}\n\n_Generated by EasyRSVP AI Team Daily Standup_ 🤖",
        "username": "Standup Bot"
      },
      "id": "slack-standup",
      "name": "📢 Post to Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [800, 300]
    },
    {
      "parameters": {
        "to": "team@easyrsvp.com",
        "subject": "📊 Daily Development Report - {{ $('📊 Collect Team Status').json.date }}",
        "emailFormat": "html",
        "message": "<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }\n        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n        .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }\n        .metric-card { background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #667eea; }\n        .agent-section { background: white; margin: 15px 0; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n        .blocker { background: #fff3cd; padding: 10px; border-radius: 4px; border-left: 4px solid #ffc107; margin: 10px 0; }\n        .achievement { background: #d1edff; padding: 10px; border-radius: 4px; border-left: 4px solid #0066cc; margin: 10px 0; }\n        ul { list-style-type: none; padding-left: 0; }\n        ul li { padding: 5px 0; }\n        ul li:before { content: '• '; color: #667eea; font-weight: bold; }\n        .priority-high { color: #dc3545; font-weight: bold; }\n        .priority-medium { color: #fd7e14; font-weight: bold; }\n        .priority-low { color: #28a745; font-weight: bold; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>🚀 EasyRSVP AI Team - Daily Report</h1>\n        <p>{{ $('📊 Collect Team Status').json.date }} | Team Health: {{ $('📈 Generate Performance Metrics').json.performance_metrics.daily_report.team_health }}</p>\n    </div>\n    \n    <div class=\"metrics\">\n        <div class=\"metric-card\">\n            <h3>📈 Velocity</h3>\n            <p><strong>{{ $('📊 Collect Team Status').json.metrics.team_velocity }}</strong></p>\n            <small>{{ $('📈 Generate Performance Metrics').json.performance_metrics.trends.velocity_trend }}</small>\n        </div>\n        <div class=\"metric-card\">\n            <h3>🎯 Quality Score</h3>\n            <p><strong>{{ $('📊 Collect Team Status').json.metrics.average_quality_score }}/10</strong></p>\n            <small>{{ $('📈 Generate Performance Metrics').json.performance_metrics.trends.quality_trend }}</small>\n        </div>\n        <div class=\"metric-card\">\n            <h3>📊 Code Coverage</h3>\n            <p><strong>{{ $('📈 Generate Performance Metrics').json.performance_metrics.quality_indicators.code_coverage }}</strong></p>\n            <small>Above industry standard</small>\n        </div>\n        <div class=\"metric-card\">\n            <h3>🚀 Deployments</h3>\n            <p><strong>{{ $('📊 Collect Team Status').json.metrics.deployment_frequency }}</strong></p>\n            <small>{{ $('📈 Generate Performance Metrics').json.performance_metrics.trends.deployment_frequency_trend }}</small>\n        </div>\n    </div>\n    \n    <h2>👥 Team Status Overview</h2>\n    \n    {% for agent_name, agent_data in $('📊 Collect Team Status').json.agents %}\n    <div class=\"agent-section\">\n        <h3>{{ agent_name.replace('_', ' ').title() }} \n            <span class=\"priority-{{ agent_data.priority_today.toLowerCase().split(' - ')[0] }}\">{{ agent_data.priority_today.split(' - ')[0] }}</span>\n        </h3>\n        \n        <h4>🎯 Current Focus:</h4>\n        <ul>\n        {% for task in agent_data.current_tasks %}\n            <li>{{ task }}</li>\n        {% endfor %}\n        </ul>\n        \n        <h4>✅ Yesterday's Achievements:</h4>\n        <ul>\n        {% for task in agent_data.completed_yesterday %}\n            <li>{{ task }}</li>\n        {% endfor %}\n        </ul>\n        \n        {% if agent_data.blockers %}\n        <h4>🚫 Blockers:</h4>\n        {% for blocker in agent_data.blockers %}\n        <div class=\"blocker\">{{ blocker }}</div>\n        {% endfor %}\n        {% endif %}\n    </div>\n    {% endfor %}\n    \n    <h2>🎉 Recent Achievements</h2>\n    {% for achievement in $('📊 Collect Team Status').json.achievements %}\n    <div class=\"achievement\">{{ achievement }}</div>\n    {% endfor %}\n    \n    <h2>🚫 Team Blockers</h2>\n    {% for blocker in $('📊 Collect Team Status').json.blockers_summary %}\n    <div class=\"blocker\">{{ blocker }}</div>\n    {% endfor %}\n    \n    <h2>🎯 Upcoming Milestones</h2>\n    <ul>\n    {% for milestone in $('📊 Collect Team Status').json.next_milestones %}\n        <li>{{ milestone }}</li>\n    {% endfor %}\n    </ul>\n    \n    <hr style=\"margin: 30px 0;\">\n    <p style=\"text-align: center; color: #666; font-size: 14px;\">\n        📊 Generated by EasyRSVP AI Team Automation System<br>\n        Next report: Tomorrow at 9:00 AM\n    </p>\n</body>\n</html>"
      },
      "id": "email-report",
      "name": "📧 Email Daily Report",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "url": "https://api.easyrsvp.com/internal/metrics",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Authorization\": \"Bearer {{ $env.INTERNAL_API_TOKEN }}\",\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  date: $('📊 Collect Team Status').json.date,\n  team_metrics: $('📊 Collect Team Status').json.metrics,\n  performance_metrics: $('📈 Generate Performance Metrics').json.performance_metrics,\n  agent_status: Object.keys($('📊 Collect Team Status').json.agents).reduce((acc, agent) => {\n    acc[agent] = {\n      status: $('📊 Collect Team Status').json.agents[agent].status,\n      tasks_count: $('📊 Collect Team Status').json.agents[agent].current_tasks.length,\n      completed_count: $('📊 Collect Team Status').json.agents[agent].completed_yesterday.length,\n      blockers_count: $('📊 Collect Team Status').json.agents[agent].blockers.length\n    };\n    return acc;\n  }, {}),\n  blockers: $('📊 Collect Team Status').json.blockers_summary,\n  report_type: 'daily_standup'\n}) }}"
      },
      "id": "store-metrics",
      "name": "💾 Store Metrics in Database",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1200, 300]
    }
  ],
  "connections": {
    "⏰ Daily 9 AM Trigger": {
      "main": [
        [
          {
            "node": "📊 Collect Team Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📊 Collect Team Status": {
      "main": [
        [
          {
            "node": "📈 Generate Performance Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📈 Generate Performance Metrics": {
      "main": [
        [
          {
            "node": "📢 Post to Slack",
            "type": "main",
            "index": 0
          },
          {
            "node": "📧 Email Daily Report",
            "type": "main",
            "index": 0
          },
          {
            "node": "💾 Store Metrics in Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-01T00:00:00.000Z",
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "description": "Workflow quotidien automatisé pour collecter et rapporter le statut de l'équipe d'agents IA EasyRSVP",
    "tags": ["easyrsvp", "standup", "reporting", "daily", "metrics"]
  }
} 